name: Deploy to AWS EC2 via SSM

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches-ignore:
      - main
  workflow_dispatch: # Manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::186297945290:role/GitHubActions-Deploy-CRM-Role
        aws-region: us-east-1 

    - name: Deploy to EC2 using SSM
      run: |
        # Define o script de deploy como uma variável para melhor legibilidade
        # O 'set -e' garante que o script pare no primeiro erro
        DEPLOY_SCRIPT='
        set -e
        echo "--- Iniciando deploy na instância ---"
        cd /home/ubuntu/projects
        if [ -d "crm-azevix" ]; then
          echo "Removendo diretório antigo..."
          rm -rf crm-azevix
        fi
        echo "Clonando o repositório da branch ${{ github.ref_name }}..."
        git clone -b ${{ github.ref_name }} https://github.com/andreazevedo80/crm-azevix.git
        cd crm-azevix
        echo "Parando containers antigos..."
        docker-compose down --rmi all -v --remove-orphans || true
        echo "Limpando o sistema Docker..."
        docker system prune -af || true
        echo "Construindo e iniciando novos containers..."
        docker-compose up --build -d
        echo "--- Deploy concluído com sucesso na instância ---"
        '

        # Envia o comando para a instância e captura o ID do comando
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy da branch ${{ github.ref_name }}" \
          --parameters "commands=${DEPLOY_SCRIPT}" \
          --query "Command.CommandId" \
          --output text)

        echo "Comando enviado para o SSM com ID: $COMMAND_ID"
        echo "Aguardando a conclusão do comando..."
        
        # Espera o comando ser concluído
        aws ssm wait command-executed --command-id $COMMAND_ID --instance-id ${{ secrets.EC2_INSTANCE_ID }}

        echo "Comando concluído. Verificando o status..."
        
        # Busca o resultado do comando
        OUTPUT=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query "{Status:Status, Stdout:StandardOutputContent, Stderr:StandardErrorContent}" \
          --output json)
          
        # Exibe as saídas
        echo "Status: $(echo $OUTPUT | jq -r .Status)"
        echo "--- Saída Padrão (Stdout) ---"
        echo $OUTPUT | jq -r .Stdout
        echo "--- Saída de Erro (Stderr) ---"
        echo $OUTPUT | jq -r .Stderr
        
        # Falha o workflow se o comando não foi bem-sucedido
        if [ "$(echo $OUTPUT | jq -r .Status)" != "Success" ]; then
          echo "❌ O comando SSM falhou na instância EC2!"
          exit 1
        fi

    - name: Verify deployment
      run: |
        echo "✅ Workflow de deploy concluído com sucesso!"
        echo "Aplicação na branch ${{ github.ref_name }} deve estar disponível em: http://${{ secrets.EC2_PUBLIC_IP }}"