name: Deploy to AWS EC2

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches-ignore:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  # Adicione o ARN da sua Role como uma vari√°vel de ambiente ou use o secret diretamente
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}

# Configura√ß√£o de permiss√µes necess√°rias para OIDC
permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS connection
      run: |
        aws sts get-caller-identity
        echo "‚úÖ AWS connection successful"
# Passo de deploy com a cria√ß√£o do diret√≥rio
    - name: Deploy e Monitoramento via SSM
      run: |
        echo "üöÄ Iniciando deployment da branch '${{ github.ref_name }}'..."

        # 1. Define o script de deploy
        DEPLOY_SCRIPT=$(cat <<'EOF'
        #!/bin/bash
        set -ex

        # Vari√°veis
        REPO_URL="https://github.com/andreazevedo80/crm-azevix.git"
        BRANCH="${{ github.ref_name }}"
        PROJECT_BASE_DIR="/home/ubuntu/projects"
        LOG_FILE="/tmp/deploy_log.txt"

        echo "--- Starting deployment at $(date) ---" > "$LOG_FILE"
        
        # --- CORRE√á√ÉO AQUI ---
        # Cria o diret√≥rio de projetos se ele n√£o existir
        mkdir -p "$PROJECT_BASE_DIR"
        
        # Navega para o diret√≥rio de projetos
        cd "$PROJECT_BASE_DIR"

        if [ -d "crm-azevix" ]; then
          echo "Removing old project directory..."
          rm -rf crm-azevix
        fi

        echo "Cloning branch '$BRANCH' from '$REPO_URL'..."
        git clone --depth 1 -b "$BRANCH" "$REPO_URL" crm-azevix
        
        cd crm-azevix

        echo "Stopping old containers..." | tee -a "$LOG_FILE"
        docker compose down --rmi all -v --remove-orphans || true
        
        echo "Pruning Docker system..." | tee -a "$LOG_FILE"
        docker system prune -af || true

        echo "Building and starting new containers..." | tee -a "$LOG_FILE"
        docker compose up --build -d

        echo "--- Deployment completed at $(date) ---" | tee -a "$LOG_FILE"
        
        docker compose ps
        EOF
        )

        # 2. Codifica e define o comando a ser executado
        DEPLOY_SCRIPT_B64=$(echo "$DEPLOY_SCRIPT" | base64 -w 0)
        COMMAND_TO_RUN="echo $DEPLOY_SCRIPT_B64 | base64 --decode | /bin/bash"

        # 3. Envia o comando para o SSM
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids "${{ env.INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Deploying ${{ github.ref_name }}" \
          --parameters "commands=['$COMMAND_TO_RUN']" \
          --timeout-seconds 600 \
          --query "Command.CommandId" \
          --output text)
        
        echo "SSM Command sent with ID: $COMMAND_ID"
        echo "Waiting for deployment to complete..."
        
        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ env.INSTANCE_ID }}" || true

        # 4. Obt√©m e exibe os logs, n√£o importa o resultado
        STATUS=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ env.INSTANCE_ID }}" \
          --query "Status" \
          --output text)
        
        echo "‚úÖ Deployment finished with status: $STATUS"

        echo "--- SCRIPT OUTPUT (STDOUT) ---"
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ env.INSTANCE_ID }}" \
          --query "StandardOutputContent" \
          --output text
        
        echo "--- SCRIPT ERRORS (STDERR) ---"
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ env.INSTANCE_ID }}" \
          --query "StandardErrorContent" \
          --output text

        # 5. Falha o workflow se o comando SSM n√£o foi bem-sucedido
        if [ "$STATUS" != "Success" ]; then
          echo "‚ùå Deployment failed!"
          exit 1
        fi