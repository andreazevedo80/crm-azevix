name: Deploy to AWS EC2

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches-ignore:
      - main
  workflow_dispatch:  # Manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Passo 1: Autentica na AWS (seu código original, está perfeito)
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::186297945290:role/GitHubActions-Deploy-CRM-Role
        aws-region: us-east-1 

    # Passo 2: Deploy para EC2 usando a Action de SSH (CORRIGIDO)
    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          # Navega para o diretório de projetos
          cd /home/ubuntu/projects
          
          # Remove diretório antigo, se existir
          if [ -d "crm-azevix" ]; then
            rm -rf crm-azevix
          fi
          
          # Clona o repositório com a branch atual
          git clone -b ${{ github.ref_name }} https://github.com/andreazevedo80/crm-azevix.git
          
          # Navega para o diretório do projeto
          cd crm-azevix
          
          # Garante que as permissões estejam corretas
          sudo chown -R ubuntu:ubuntu .
          
          # Para e remove containers existentes (|| true para não falhar se não existirem)
          docker-compose down --rmi all -v --remove-orphans || true
          
          # Limpa o cache do Docker e imagens não utilizadas
          docker system prune -af || true
          
          # Reconstrói e inicia os containers em modo detached
          docker-compose up --build -d
          
          # Exibe o status dos containers para verificação no log
          echo "Verificando status dos containers..."
          docker-compose ps
          
          # Mostra os logs recentes para depuração
          echo "Exibindo logs recentes..."
          sleep 10 # Dá um tempo para os containers iniciarem
          docker-compose logs --tail=50

    # Passos 3 e 4: Verificação e Notificação (seu código original, está ótimo)
    - name: Verify deployment
      run: |
        echo "Deployment triggered for branch: ${{ github.ref_name }}"
        echo "Application should be available at: http://${{ secrets.EC2_PUBLIC_IP }}"
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi