version: '3.8'

services:
  db:
    image: postgres:15
    container_name: crm-azevix-db
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - crm_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: . # Constrói a partir do diretório raiz, onde está o Dockerfile
    container_name: crm-azevix-backend
    env_file: .env
    depends_on:
      db:
        condition: service_healthy # Espera o DB estar pronto
    ports:
      - "5090:5090"
    networks:
      - crm_network
    # Não precisamos mais de volumes complexos, o Dockerfile já copia tudo.
    # Isso é melhor para um ambiente de "produção".

  nginx:
    image: nginx:alpine
    container_name: crm-azevix-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      # O Nginx agora serve apenas como um proxy reverso.
      # O Flask/Gunicorn cuidará de servir os arquivos estáticos durante o desenvolvimento.
    depends_on:
      - backend
    networks:
      - crm_network

volumes:
  postgres_data:

networks:
  crm_network:
    driver: bridge