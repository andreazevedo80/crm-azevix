## üìÖ Roadmap de Desenvolvimento

### ‚úÖ Vers√µes Conclu√≠das
- **1.0** ‚Äì Autentica√ß√£o e estrutura base
- **2.0 a 2.2** ‚Äì CRUD de Leads, associa√ß√£o com vendedor, tipo de conta
## vers√£o 2.03 [A Grande Reestrutura√ß√£o: Contas, Contatos e Integridade de Dados]
Objetivo: Criar a base de dados profissional com as entidades "Conta" e "Contato", garantindo a integridade dos dados desde o in√≠cio com valida√ß√µes e padroniza√ß√µes.

# Requisitos da feature:
- A entidade Conta deve ter Raz√£o Social, Nome Fantasia, CNPJ (criptografado), Tipo e um campo is_active para "soft delete".
- O CNPJ deve ser validado (formato e l√≥gica de c√°lculo) e ser√° o identificador √∫nico para evitar Contas duplicadas.
- A entidade Contato deve ser associada a uma Conta e conter nome, email, telefone, cargo e um campo is_active.
- Os n√∫meros de telefone devem ser padronizados e normalizados no backend antes de serem salvos (ex: usando a biblioteca phonenumbers).
- O fluxo de cria√ß√£o de um novo Lead (Oportunidade) deve estar atrelado √† cria√ß√£o/sele√ß√£o de uma Conta e um Contato.
- A busca por duplicatas no fluxo de cria√ß√£o deve ser inteligente, normalizando os nomes para a compara√ß√£o (ex: "Empresa ABC Ltda" deve ser encontrada ao buscar por "empresa abc").

# O que ser√° modificado:
- backend/models.py: Criar os modelos Conta e Contato com os novos campos. Refatorar Lead para se conectar a Conta.
- backend/contas.py (Novo): Criar o Blueprint e as APIs para gerenciar o CRUD de Contas e Contatos, incluindo a l√≥gica de valida√ß√£o, normaliza√ß√£o e criptografia.
- backend/templates/: Criar as novas telas de cadastro que refletem o novo fluxo.

### vers√£o 2.04 [Visualiza√ß√£o e Gest√£o de Contas e Contatos]
Objetivo: Criar a p√°gina de "Detalhes da Conta", que ser√° o hub central para todas as intera√ß√µes com um cliente, e permitir a gest√£o de m√∫ltiplos contatos.

# Requisitos da feature:
- Na lista de contas, o bot√£o "Detalhes" (atualmente desativado) dever√° funcionar, levando para uma nova p√°gina (/contas/<id>).
- A p√°gina de detalhes deve exibir todas as informa√ß√µes da Conta.
- A p√°gina deve ter uma se√ß√£o para listar todos os Contatos associados √†quela Conta.
- Nesta mesma se√ß√£o, deve haver um formul√°rio ou bot√£o para adicionar novos Contatos a uma Conta j√° existente.
- A p√°gina tamb√©m deve ter uma se√ß√£o para listar todas as Oportunidades (Leads) associadas √†quela Conta.

# O que ser√° modificado:
- backend/contas.py: Criar a nova rota /contas/<id> e a API para buscar os detalhes completos de uma conta, incluindo seus contatos e leads.
- backend/templates/contas/detalhe_conta.html (Novo): Criar a nova tela de visualiza√ß√£o.
- backend/static/js/detalhe_conta.js (Novo): Criar o JavaScript para gerenciar a interatividade da p√°gina de detalhes (como adicionar um novo contato via API sem recarregar a p√°gina).

### üîÑ Em Desenvolvimento

### Plano de A√ß√£o e Requisitos de Software - CRM Azevix (Revis√£o 3.0)
Introdu√ß√£o ao Novo Conceito: "Conta", "Contato" e "Lead"
Para suportar suas novas ideias, vamos adotar uma arquitetura de dados profissional:
*Conta*: A entidade central que representa a Empresa ou √ìrg√£o P√∫blico. √â √∫nica e guarda dados como Raz√£o Social, Nome Fantasia, CNPJ e telefone principal.
*Contato*: Uma Pessoa que trabalha em uma Conta. Uma Conta pode ter m√∫ltiplos Contatos (Diretor, Gerente, Financeiro, etc.), cada um com seu pr√≥prio e-mail, telefone e cargo.
*Lead* (Oportunidade): Representa uma Oportunidade de Neg√≥cio. √â um "neg√≥cio em potencial" que voc√™ tem com uma Conta. Ex: "Venda de Sistema de TI", "Renova√ß√£o de Contrato". Um Lead sempre estar√° ligado a uma Conta e, opcionalmente, a um Contato principal.

Introdu√ß√£o: Conceitos Arquiteturais Chave
Fonte √önica da Verdade: O banco de dados √© a fonte √∫nica da verdade. Nenhuma configura√ß√£o cr√≠tica (status, segmentos, regras) ser√° mantida no c√≥digo ("hardcoded").

Seguran√ßa em Primeiro Lugar: Implementaremos pr√°ticas de seguran√ßa desde o in√≠cio, incluindo controle de acesso baseado em pap√©is (Roles), criptografia de dados sens√≠veis e desativa√ß√£o em vez de exclus√£o (soft delete).

Performance e Escalabilidade: O design da base de dados e das APIs levar√° em conta a performance, utilizando √≠ndices e pagina√ß√£o para garantir que a aplica√ß√£o permane√ßa r√°pida conforme os dados crescem.

Requisitos Cont√≠nuos e Operacionais
Estes s√£o pontos que devem ser considerados ao longo de todo o desenvolvimento.

√çndices de Banco de Dados: Durante a cria√ß√£o de cada tabela no models.py, as colunas que ser√£o frequentemente usadas em buscas (cnpj, email, user_id, conta_id, etc.) devem ser marcadas com index=True ou unique=True para garantir a performance das consultas.

### Pr√≥ximas Fases (Roadmap de Desenvolvimento Detalhado)



### vers√£o 2.05 [Hierarquia de Contas e Gest√£o de Vendedores]
Objetivo: Implementar a l√≥gica de Matriz/Filial e permitir que administradores reatribuam a responsabilidade de uma conta.

# Requisitos da feature:
- Deve ser poss√≠vel definir uma Conta como "filial" de outra Conta ("matriz").
- Na p√°gina de "Detalhes da Conta", um administrador deve ver um campo para selecionar a "Conta Matriz".
- Na mesma p√°gina, um administrador deve ver um campo para alterar o "Respons√°vel" (o vendedor) por aquela conta.

# O que ser√° modificado:
- backend/models.py: Adicionar a coluna matriz_id na tabela Conta, que se auto-referencia.
- backend/contas.py: Atualizar a API de edi√ß√£o de contas para permitir a altera√ß√£o do user_id (dono) e do matriz_id.
- backend/templates/contas/detalhe_conta.html: Adicionar os campos de edi√ß√£o para o admin.

## vers√£o 2.06 [Seguran√ßa e Permiss√µes Baseadas em Roles]
Objetivo: Implementar um sistema de permiss√µes robusto e controlar quem pode acessar o sistema e o que pode ver.

# Requisitos da feature:
- O sistema deve ter uma tabela Role (ex: 'admin', 'vendedor', 'gerente').
- UUm usu√°rio deve ter uma Role associada e um campo is_active (soft delete).
- Apenas administradores poder√£o criar novos usu√°rios (a tela de registro p√∫blico ser√° desativada).
- O cadastro de novos usu√°rios ser√° restrito ao dom√≠nio @azevix.com.br. (deve ser uma vari√°vel sem hardcode), caso haja necessidade de adicionar outros dominios;
- A API de listagem de Contas/Leads deve respeitar a role: admin v√™ tudo, vendedor v√™ apenas o seu.

# O que ser√° modificado:
- backend/models.py: Criar a tabela Role e adicionar as rela√ß√µes e o campo is_active ao modelo User.
- backend/auth.py: Remover a rota de registro p√∫blico e criar a funcionalidade de convite no painel de admin.
- backend/leads.py & backend/contas.py: Implementar a l√≥gica de visualiza√ß√£o baseada em role.

## vers√£o 2.07 [Log de Auditoria e Pagina√ß√£o]
Objetivo: Rastrear altera√ß√µes importantes e garantir a performance do sistema com o crescimento dos dados.

# Requisitos da feature:
- O sistema deve registrar um hist√≥rico de altera√ß√µes para cada Lead (ex: "Status alterado de 'NOVO' para 'CONTATADO' por Andr√© Azevedo em 09/07/2025").
- Todas as listas principais (Leads, Contas, etc.) devem ser paginadas, mostrando um n√∫mero limitado de itens por p√°gina (ex: 20) para manter a aplica√ß√£o r√°pida.

# O que ser√° modificado:
- backend/models.py: Criar uma nova tabela HistoricoAlteracao.
- backend/leads.py e backend/propostas.py: Na rota de atualiza√ß√£o, adicionar a l√≥gica para criar um novo registro no hist√≥rico.
- backend/templates/: Adicionar a exibi√ß√£o do hist√≥rico na tela de detalhes do lead/proposta.
- backend/static/js/ e backend/*_api.py: Implementar a l√≥gica de pagina√ß√£o no backend e no frontend.

## vers√£o 3.01 [Administra√ß√£o: Configura√ß√µes, Workflow e Motivos de Perda]
Objetivo: Dar ao administrador controle total sobre as entidades e regras de neg√≥cio do CRM.

# Requisitos da feature:
- Admin pode gerenciar (CRUD) os Status de Lead e os Segmentos.
- Admin pode definir as regras de transi√ß√£o para o Workflow de Status.
- Admin pode gerenciar uma lista de "Motivos de Perda" (ex: "Pre√ßo", "Concorr√™ncia", "Prazo"). Este motivo ser√° um campo obrigat√≥rio quando um Lead for movido para o status "Perdido".
- Admin pode gerenciar as configura√ß√µes de e-mail (SMTP).

# O que ser√° modificado:
- backend/models.py: Criar as tabelas ConfigStatusLead, ConfigSegmento, ConfigMotivoPerda, ConfiguracoesGerais e adicionar o campo de regras de workflow.
- backend/admin.py (Novo): Criar o Blueprint e as interfaces para o admin gerenciar tudo isso.
- backend/leads.py: A rota update_lead ir√° validar as regras do workflow e exigir o motivo da perda.

# vers√£o 4.01 [Propostas: Estrutura, Custos e Lucratividade]
Objetivo: Implementar o m√≥dulo de propostas, o cora√ß√£o financeiro do CRM.

# Requisitos da feature:
- Ser capaz de criar propostas detalhadas, com m√∫ltiplos produtos/servi√ßos de um cat√°logo.
- Adicionar custos (fixos/percentuais) para calcular a margem de lucro estimada.
- A l√≥gica de custos deve ser sens√≠vel ao tipo_conta (P√∫blica vs. Privada).
- Propostas devem ter status e prazos.

# O que ser√° modificado:
- backend/models.py: Criar as tabelas ProdutoServico, Proposta, ItemProposta, CustoProposta.
- backend/propostas.py (Novo): Blueprint com toda a l√≥gica de neg√≥cio para propostas.
- backend/templates/: Novas interfaces para criar e visualizar propostas.

# vers√£o 4.02 [Automa√ß√£o de Documentos e Comunica√ß√£o]
Objetivo: Automatizar a cria√ß√£o e o envio de propostas.

# Requisitos da feature:
- O sistema deve gerar um documento PDF profissional e personaliz√°vel a partir dos dados de uma proposta.
- Deve ser poss√≠vel enviar a proposta gerada por e-mail diretamente do sistema, usando o e-mail configurado do vendedor.

# O que ser√° modificado:
- backend/propostas.py: Adicionar a rota para gera√ß√£o de PDF e a l√≥gica de envio de e-mail.
- backend/email.py (Novo): M√≥dulo utilit√°rio para envio de e-mails, lendo as configura√ß√µes do banco de dados.

# vers√£o 5.01 [M√≥dulo de Relat√≥rios e Dashboard Inteligente]
Objetivo: Fornecer intelig√™ncia de neg√≥cio, consolidando os dados em relat√≥rios e em um dashboard din√¢mico.

# Requisitos da feature:
- O Dashboard deve exibir um Funil de Vendas visual (quantos R$ est√£o em cada etapa do funil).
- O Dashboard deve mostrar m√©tricas chave: Taxa de Convers√£o, Valor M√©dio das Propostas, etc.
- Deve haver uma p√°gina de Relat√≥rios com filtros (por data, por vendedor) para analisar o desempenho de vendas.
- Todos os relat√≥rios devem ser export√°veis para PDF.

# O que ser√° modificado:
- backend/relatorios.py (Novo): Blueprint para gerar os dados para os relat√≥rios.
- backend/main.py: Rota do dashboard ser√° modificada para consumir os dados da API de relat√≥rios.
- backend/templates/dashboard.html: Substitui√ß√£o do conte√∫do est√°tico por gr√°ficos din√¢micos.
